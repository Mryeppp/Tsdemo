//对象属于可变类型
//原始类型都是不可变类型 内存中不会创建重复的原始值

let test = {
  name : "lyp",
  age: 20
}
let test02 = test; //test02和test指向的是同一个对象,地址相同
test.age = 18      //修改了test对象的属性值 则test02也会修改
console.log(test02)

let obj = new Object()
let obj02 = Object()
let obj03 = {}
console.log(obj===obj02)  //false
console.log(obj02==obj03) //false
//对象的相等和全等比较的是地址是否一样




// 关于js对象的内存问题，要分清 修改的是变量(值) 还是对象(属性值)
/*
----------------------      ---------------------- 
|变量名|  值  |  地址 |      | 地址| 属性 | 属性值 |     
----------------------      ----------------------
|obj  | 0x11| 0x11   |      | 0x22| name |  pyl  |   
---------------------|      ---------------------|   
|obj02| 0x12| 0x12   |      | 0x33|      |       |   
---------------------|      ---------------------|   
|obj03| 0x13| 0x13   |      // test02.name = "pyl"                  
---------------------|      // 修改的是属性值，这是修改了对象
|test | 0x22| 0x22   |      // test02 = {} 
---------------------|      // 这是修改的值,改变了test02的地址，这是修改了变量
|test02|0x22| 0x22   |      // 以上情况如此混乱所以用const修饰符修饰对象
---------------------|


*/